---
layout: post
---

h1. Порядок приемки лабораторных работ

# *Качество кода.* Убедитесь, что вы выполнили работу в соответствии со всеми "рекомендациями":http://redmine.software.unn.ru/projects/agile/wiki/%D0%A0%D0%B5%D0%BA%D0%BE%D0%BC%D0%B5%D0%BD%D0%B4%D0%B0%D1%86%D0%B8%D0%B8_%D0%BA_%D0%BE%D1%84%D0%BE%D1%80%D0%BC%D0%BB%D0%B5%D0%BD%D0%B8%D1%8E_%D0%BB%D0%B0%D0%B1%D0%BE%D1%80%D0%B0%D1%82%D0%BE%D1%80%D0%BD%D1%8B%D1%85_%D1%80%D0%B0%D0%B1%D0%BE%D1%82 к оформлению - там содержатся наиболее общие и типичные ошибки. Периодически страница обновляется, так что перед сдачей просмотрите ее еще раз.
# *SVN.* Код должен быть закачан в репозиторий. Проверяется последняя версия кода (наличие зачатков следующей по порядку лабораторки не возбраняется, напротив, приветствуется). Проект должен билдиться (проверьте пути, ссылки на другие сборки и т.п.). Выкачайте проект в другую папку и попробуйте собрать.
# *Issue.* Должна быть создана задача (issue, тикет). *После завершения перевешивайте тикет на преподавателя*. Рекомендуется следующий шаблон именования: _Lab1 - Ivanov - Stack_. В теле задачи не обязательно указывать ревизию и путь до исходников.
# *Feedback.* Получив рецензию от преподавателя, нужно исправить _все_ замечания по текущей лабораторной. Если какие-то из них непонятны, нужно перевесить задачу обратно на преподавателя, и задать уточняющие вопросы. Перевешенная задача без вопроса принимается к рассмотрению как содержащая _все_ исправления из прежних рецензий. Допускается не исправлять замечания к следующей лабораторной во время сдачи предыдущей.

Лабораторные работы предполагают развитие одного проекта, работы над которым будет проходить в несколько итераций. Сперва в стиле TDD будет разработано ядро системы, затем реализован графический интерфейс пользователя, после чего будет производиться расширение системы и приведение к стандартной архитектуре DDD.

h1. Описание лабораторных работ

h2. Л1 - TDD

*Задание*

Реализовать библиотеку, классы который выполняют некоторые операции (задания индивидуальные). Данная библиотека впоследствии будет играть роль центральной части системы, несущей всю бизнес-логику.

*Требования*

* В итоге должен быть один проект (solution), в котором две библиотеки - тестовая и собственно сборка с логикой. Никаких консольных приложений для тестирования этой функциональности прикладывать не нужно, наоборот, это сигнализирует о том, что код писался не по TDD.
* Учитывайте все требования к исходному коду, которые оговаривались на лекциях. Даже если какой-то принцип не был изложен на паре, преподаватель может указать на недостаток и попросить исправить (указав, в чем недостаток состоит, например, назвав нарушенный принцип). Некоторые замечания могут быть спорными, однако это не попытка привести всех к некоему единому стилю кодирования - в целом у вас остается право использовать свой coding style, если вы сумеете обосновать его. Назначение замечаний и смысл нескольких итераций приемки - это имитация ситуации, когда требования меняются и код нужно отрефакторить.

h2. Л2 - MVP

*Задание*

Добавить к проекту, созданному в рамках первой лабораторной, интерфейс и запрограммировать пользовательскую логику. Интерфейс может быть WinForms, Web или WPF.

*Требования*

* Презентационная логика должна реализовывать паттерн Passive View. То есть в коде View не должно быть ни одного @if@ и @for@!
* Код должен быть написан по TDD.

h2. Л3 - Infrastructure

*Задание*

Написать функциональность ведения журнала действий пользователя. Это должно быть расширение проекта, созданного ранее. Все запросы пользователя, которые проходят через презентационную логику, должны логироваться. Каждое событие должно иметь метку времени о том, когда оно произошло.

*Требования*

* Должна быть возможность записать все это в файл.
* Также должна быть возможность прочитать все эти записи через интерфейс программы.
* Код по-прежнему должен быть написан по технике TDD. Правильность логирования тестируется путем контроля, что на View появляется правильный лог.

h2. Л4 - DDD-стандартизация + расширение

*Задание*

# Переименовать сборки согласно DDD-подходу.
# Создать еще один тип логирования - в HTML-виде. Сделать возможность из интерфейса переключаться между форматами ведения журнала.
# Создать еще один тип клиента (если был Win - надо веб, и наоборот)
# Сгруппировать клиентов в один solution folder
