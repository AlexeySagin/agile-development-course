---
layout: post
---

h1. Рекомендации к оформлению

h3. Организация проекта

# Один solution, количество сборок в нем - на каждый DDD-слой по сборке, плюс сборка модульных тестов.
# Удалите из solution все, что вам не нужно - лишние файлы и регионы. Удалите ненужные комментарии, автосгенерированный текст. По нажатию Ctrl+A должны запускаться только ваши unit-тесты, а не автосгенерированные заготовки.
# Не заливайте в репозиторий bin, obj, TestResults папки.

h3. Дизайн кода

# Код должен быть написан в духе Test-Driven Development.
# Следуйте принципам хорошего объектно-ориентированного подхода (принципы SOLID). Типичная ошибка - иметь в сборке высокоуровнего кода (абстракции, слоя, независимого от технологии) ссылку на слой низкоуровневого кода (реализации, слоя, зависимого от технологии).
# При проектировании классов следите за соблюдением инкапсуляции.

h3. Чистота кода

# Следуйте принципу DRY - Don't Repeat Yourself. В коде не должно быть дублирования.
# Ни в коем случае не оставляйте "мертвый код" - тот, который не вызывается.
# Пройдитесь Resharper'ом по исходному коду, большинство предупреждений, который показывает Resharper, следует устранить (например, относительно пространств имен и избыточного кода).
# Проверьте текст на опечатки. Грамматические ошибки снижают впечатление от работы.
# Соблюдайте единый стиль кодирования при расстановке фигурных скобок - особенно в условных конструкциях (например, правило, ставить или не ставить скобки для тела из одной строки должны распространяться на весь проект).
# Используйте autoproperty, где это подходит. Кода становится значительно меньше.

h3. Именование

# Используйте единый стиль именования. Например, не годится, если функции называются то с большой буквы, то с малой, то @ВерблюжьимСтилем@, то @с_подчеркиваниями@.
# Называйте все файлы и сущности по-человечески (названия типа Form1 или UnitTest1 не принимаются). Избегайте названий переменных типа br, flag или d - название должно отражать суть.
# Не нужно сокращений типа Mul вместо Multiply - постарайтесь, чтобы код был близок к английскому тексту.
# Названия класса и файла, в котором он находится, должны совпадать. Соответственно, один файл – один класс.
# Не добавляйте в имя больше контекста, чем надо (например, SolutionOfSomething.sln или CalculatorLibrary или BarClass.cs).
# Вы будете развивать этот проект на протяжении всех лаб, поэтому названия в духе 1_Lab_TDD станут неактуальными. Представьте, что вы развиваете продукт, и именуйте соответственно. Никаких суффиксов вроде MVP, Lab, TDD не должно быть в названии solution или проекта.
# Префиксы/постфиксы Test в именах тестовых методов обычно только добавляют шуму. От них надо избавиться, и так понятно, что это тест. 

h3. Тесты

# Тесты должны сначала "падать", а потом, когда напишете код, - проходить. Тесты на то, что конструктор вернет не null - бессмысленны.
# Названия тестовых методов должны показывать не то, что вы делаете, а то, какое требование вы предъявляете к коду. Пересмотрите еще раз называния тестов - по ним читатель должен понять, что требуется от кода, ("бросить ошибку если ...", "сложить два числа", "Возвести в степень комплексное число" и т.п.).
# Никаких if-операторов в тестах. Циклов тоже не надо. Иначе тесты по сложности приближаются к коду программы, и в них тоже станет легко делать ошибки.
# Обратите внимание на порядок аргументов в Assert'ах (expected, actual).
# Тесты должны быть написаны в соответствии с Single Responsibility Principle. Обратите внимание на число и характер Assert'ов.
# Вместо @Assert.AreEqual@ для сравнения с булевым значением есть соответствующие конструкции @Assert.IsTrue@ и @Assert.IsFalse@.
# Ни в коем случае не должно быть составных Assert-ов (типа @Assert.IsTrue(condition1 || condition2 && condition3)@ - разбейте на части.)
# Там, где есть потеря точности, не используйте конструкции типа @Assert.IsTrue(norm.Length - 1 < Eps);@ Вместо этого используйте @Assert.AreEqual(1, norm.Length, Eps);@