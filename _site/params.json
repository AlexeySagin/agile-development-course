{"name":"Agile Development Course","tagline":"","body":"Летучки\r\n=======\r\n\r\n### Советы\r\n\r\n1.  Не забываем про цель спецкурса, это поможет найти ответы на многие\r\n    вопросы. (прежде всего имеются в виду изменяющиеся требования)\r\n2.  Отвечая на вопрос, рекомендуется приводить в пример реальные системы\r\n    (и желательно не из лекций). Паттерны, принципы нужно\r\n    иллюстрировать.\r\n3.  Рекомендуется писать своими словами, но быть аккуратнее.\r\n\r\n2012\r\n----\r\n\r\n### 1. Introduction to Agile\r\n\r\n1.  Манифест ГТР\r\n2.  Определение ГТР\r\n3.  Факторы, противодействующие внедрению ГТР\r\n\r\nEnglish\r\n\r\n1.  Agile Manifesto\r\n2.  Definition of Agile Development methodologies\r\n3.  Factors (obstacles), that may prevent you from using Agile practices\r\n\r\nДополнительные вопросы\r\n\r\n-   Основные черты гибких методологий разработки\r\n-   Какие факторы повлияли на содержание первых методологий разработки\r\n-   Достоинства и недостатки каскадной модели\r\n\r\n### 2. Clean Code\r\n\r\n1.  Ключевые понятия при разговоре о качестве кода, их использование.\r\n2.  Основные правила оформления функций.\r\n3.  Почему важно поддерживать код в чистоте.\r\n\r\nEnglish\r\n\r\n1.  Key terms for talking about the quality of the code, and their\r\n    meaning and usage.\r\n2.  Major rules for formatting/structuring functions.\r\n3.  Why it is important, to keep the code clean?\r\n\r\nДополнительные вопросы\r\n\r\n-   Основные правила именования.\r\n-   Недостатки использования комментариев.\r\n-   Техника безопасности.\r\n\r\n### 3. Clean Code / Refactoring\r\n\r\n1.  Примеры неправильного использования комментариев.\r\n2.  Определение рефакторинга и его цели.\r\n3.  Примеры запахов и способы их устранения (3-5 примеров).\r\n\r\nEnglish\r\n\r\n1.  Examples of wrong usage of comments.\r\n2.  Definition of refactoring and its purpose.\r\n3.  Code smell examples, ways to resolve them (3-5 examples).\r\n\r\n### 4. Scrum\r\n\r\n1.  Жизненный цикл спринта.\r\n2.  Роли в Scrum, их основные ответственности.\r\n3.  Product и Sprint backlog, что это такое и основные правила работы с\r\n    ними.\r\n\r\nEnglish\r\n\r\n1.  Sprint lifecycle.\r\n2.  Scrum roles, their responsibilities.\r\n3.  Product and Sprint backlog, what it is and major rules.\r\n\r\nДополнительные вопросы\r\n\r\n-   Жизненный цикл Scrum.\r\n-   Артефакты в Scrum, правила работы с ними.\r\n-   Основные практики Scrum.\r\n-   Daily Scrum / Stand-up meeting: назначение, правила проведения.\r\n\r\n### 5. Test-Driven Develoment\r\n\r\n1.  Мифы про TDD\r\n2.  Цикл разработки по TDD\r\n3.  Атрибуты хорошего unit-теста\r\n\r\nEnglish\r\n\r\n1.  Myths about TDD\r\n2.  TDD development cycle\r\n3.  Attributes of a good unit-test\r\n\r\nДополнительные вопросы\r\n\r\n-   Что такое TDD, его назначение\r\n\r\n### 6. XP\r\n\r\n1.  Практики XP\r\n2.  Парное программирование (роли, ответственности, преимущества)\r\n3.  Внедрение XP (алгоритм, важные моменты которые нужно учитывать)\r\n\r\nEnglish\r\n\r\n1.  XP practices\r\n2.  Pair programming (roles, responsibities, advantages)\r\n3.  Introducing XP (algorithm, important rules to remember)\r\n\r\nДополнительные вопросы\r\n\r\n-   Ценности XP (на всех уровнях)\r\n-   Метафора: назначение практики, примеры\r\n\r\n### 7. SOLID\r\n\r\n1.  SRP\r\n2.  OCP\r\n3.  DIP\r\n\r\nДополнительные вопросы\r\n\r\n-   LSP\r\n-   ISP\r\n-   Закон Деметера (что можно, чего нельзя)\r\n\r\nПлан ответа:\r\n\r\n1.  Формулировка, раскрыть все слова названия.\r\n2.  Как достигается.\r\n3.  Последствия нарушения.\r\n\r\n### 8. MVP and MVVM\r\n\r\n​1. Типичные проблемы с GUI.\\\r\n2. Диаграмма Passive View. Ответственности слоев в Passive View.\\\r\n3. Назначение и преимущества применения Passive View (ну или MVVM)\r\n\r\nEnglish\r\n\r\n​1. Common issues with GUI.\\\r\n2. Passive View diagram. Responsibilities of layers in Passive View.\\\r\n3. Purpose of Passive View, its advantages (or MVVM)\r\n\r\nДополнительные вопросы\r\n\r\n-   Популярные паттерны при построении UI.\r\n-   Диаграмма MVVM. Ответственности слоев.\r\n\r\n### 9. Domain-Driven Design\r\n\r\n1.  Понятие Domain, Model. Назначение DDD.\r\n2.  Необходимые условия для применения DDD.\r\n3.  Нарисовать диаграмму DDD (“улучшенная” слоистая архитектура).\r\n4.  Назначение сборки Application.\r\n5.  Назначение Infrastructure, способ стыковки с Domain.\r\n\r\nПредыдущие года\r\n---------------\r\n\r\n-   [[Летучки 2011|2011]]\r\n-   [[Летучки 2010|2010]]","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}